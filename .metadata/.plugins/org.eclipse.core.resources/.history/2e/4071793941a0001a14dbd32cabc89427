#include "chip.h"

#ifdef MCU_TARGET_0


static I2CM_XFER_T  i2cmXferRec;
#define I2C_CLK_DIVIDER         (40)
#define I2C_BITRATE             (100000)
#define I2C_ADDR_7BIT           (0x60)
#define TICKRATE_HZ             (1000)

#define TASK_LOOP               while (true)
#define EVENT_LED_BUMP          0x01
#define EVENT_LED_TOGGLE        0x02

static volatile int intErrCode;
static volatile uint32_t ticks;
static uint8_t txData[16];
static uint8_t rxData[16];
static uint32_t event_flag;

static void Init_I2C_PinMux(void)
{
	/* Enable the clock to the Switch Matrix */
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_SWM);

	/* Connect the I2C_SDA and I2C_SCL signals to port pins(P0.10, P0.11) */
	Chip_SWM_MovablePinAssign(SWM_I2C_SDA_IO, 0);
	Chip_SWM_MovablePinAssign(SWM_I2C_SCL_IO, 1);

	/* Enable Fast Mode Plus for I2C pins */
	Chip_IOCON_PinSetI2CMode(LPC_IOCON, IOCON_PIO10, PIN_I2CMODE_FASTPLUS);
	Chip_IOCON_PinSetI2CMode(LPC_IOCON, IOCON_PIO11, PIN_I2CMODE_FASTPLUS);

	/* Disable the clock to the Switch Matrix to save power */
	Chip_Clock_DisablePeriphClock(SYSCTL_CLOCK_SWM);
}

static void setupI2CMaster()
{
	Chip_I2C_Init(LPC_I2C);
	Chip_I2C_SetClockDiv(LPC_I2C, I2C_CLK_DIVIDER);
	Chip_I2CM_SetBusSpeed(LPC_I2C, I2C_BITRATE);
	Chip_I2CM_Enable(LPC_I2C);
}

/* Function to setup and execute I2C transfer request */
static void SetupXferRecAndExecute(uint8_t devAddr,
								   uint8_t *txBuffPtr,
								   uint16_t txSize,
								   uint8_t *rxBuffPtr,
								   uint16_t rxSize)
{
	/* Setup I2C transfer record */
	i2cmXferRec.slaveAddr = devAddr;
	i2cmXferRec.status = 0;
	i2cmXferRec.txSz = txSize;
	i2cmXferRec.rxSz = rxSize;
	i2cmXferRec.txBuff = txBuffPtr;
	i2cmXferRec.rxBuff = rxBuffPtr;

	Chip_I2CM_XferBlocking(LPC_I2C, &i2cmXferRec);
}

/* Function to build the LED value for the PCA9532 LED driver & I/O expander */
static uint32_t build_led(uint32_t t1)
{
	uint32_t i, k, out_val = 0;

	for (i = 0; i < 16; i++) {
		k = ((t1 >> i) & 0x01) ? 0x01 : 0x00;
		out_val |= (k << (i * 2));
	}

	return out_val;
}

/* Function sends update to the I/O expander */
static void sendI2CMaster(uint16_t i2c_addr, uint32_t ledStateOut)
{
	int index = 0;

	txData[index++] = (uint8_t) 0x16;							/* I2C device regAddr */
	txData[index++] = (uint8_t) ((ledStateOut)     & 0xff);		/* I2C device regVal */
	txData[index++] = (uint8_t) ((ledStateOut >> 8)  & 0xff);		/* I2C device regVal */
	txData[index++] = (uint8_t) ((ledStateOut >> 16) & 0xff);		/* I2C device regVal */
	txData[index++] = (uint8_t) ((ledStateOut >> 24) & 0xff);		/* I2C device regVal */

	SetupXferRecAndExecute(i2c_addr, txData, 5, rxData, 0);
}

/*****************************************************************************
 * Public functions
 ****************************************************************************/

/**
 * @brief	Handle interrupt from SysTick timer
 * @return	Nothing
 */
void SysTick_Handler(void)
{
	ticks++;

	if ((ticks % 50) == 0) {
		event_flag |= EVENT_LED_BUMP;
	}
	if ((ticks % 125) == 0) {
		event_flag |= EVENT_LED_TOGGLE;
	}
}

/**
 * @brief	Main routine for I2CM example
 * @return	Function should not exit
 */
int main(void)
{
	uint32_t led_ct = 0;

	/* Generic Initialization */
	SystemCoreClockUpdate();
	Board_Init();

	/* Clear activity LED */
	Board_LED_Set(0, false);

	/* Setup I2C pin muxing */
	Init_I2C_PinMux();

	/* Allocate I2C handle, setup I2C rate, and initialize I2C clocking */
	setupI2CMaster();

	/* Disable the interrupt for the I2C */
	NVIC_DisableIRQ(I2C_IRQn);

	/* Enable SysTick Timer */
	SysTick_Config(SystemCoreClock / TICKRATE_HZ);

	/* Enter the task loop */
	TASK_LOOP {
		__WFI();

		/* Bump the off-board LEDs by one */
		if (event_flag & EVENT_LED_BUMP) {
			event_flag &= ~EVENT_LED_BUMP;
			sendI2CMaster(I2C_ADDR_7BIT, build_led(led_ct++));
		}

		/* Toggle on-board RED LED to show activity. */
		if (event_flag & EVENT_LED_TOGGLE) {
			event_flag &= ~EVENT_LED_TOGGLE;
			Board_LED_Toggle(0);
		}
	}
}


/*
int main(void) {
	volatile unsigned long i;

	LPC_SYSCTL->SYSAHBCLKCTRL |= 1 << SYSCTL_CLOCK_SWM;
	LPC_SYSCTL->SYSAHBCLKCTRL |= 1 << SYSCTL_CLOCK_I2C0;
	LPC_SYSCTL->SYSAHBCLKCTRL |= 1 << SYSCTL_CLOCK_GPIO;
	LPC_SYSCTL->SYSAHBCLKCTRL |= 1 << SYSCTL_CLOCK_IOCON;
	LPC_GPIO_PORT->DIR[0] |= 1 << 4;
	LPC_GPIO_PORT->CLR[0] = 1 << 4;

//LPC_GPIO_PORT->DIR[0] |= 1 << 0;
//LPC_GPIO_PORT->DIR[0] |= 1 << 1;

//	while (1) {
//		LPC_GPIO_PORT->SET[0] = (1 << 0);
//		LPC_GPIO_PORT->SET[0] = (1 << 1);
//		for(i = 0; i < 10000; i++){ }
//		LPC_GPIO_PORT->CLR[0] = (1 << 0);
//		LPC_GPIO_PORT->CLR[0] = (1 << 1);
//		for(i = 0; i < 10000; i++){ }
//	}

	LPC_SWM->PINASSIGN[7] &= 0x00FFFFFF;
	LPC_SWM->PINASSIGN[8] &= 0xFFFFFF00;
	LPC_SWM->PINASSIGN[7] |= 0x01 << 24; //P0.1 = I2C_SDA
	LPC_SWM->PINASSIGN[8] |= 0x00 << 0; //P0.0 = I2C_SCL

	LPC_IOCON->PIO0[0] |= PIN_OD_MASK;
	LPC_IOCON->PIO0[1] |= PIN_OD_MASK;

	LPC_SYSCON->PRESETCTRL &= 1 << 6;

	LPC_I2C->CFG |= 1 << 0; //Enable master
	LPC_I2C->CLKDIV = 64; //Set divider

	LPC_SYSCON->PRESETCTRL |= 1 << 6;

	while (1) {
		LPC_GPIO_PORT->SET[0] = (1 << 4);


		LPC_I2C->MSTDAT = 0x70;
		LPC_I2C->MSTCTL |= 1 << 1; //Start

		while(!(LPC_I2C->STAT & 0x01)){ }

		//LPC_I2C->MSTDAT = 0x55;

		//while(!(LPC_I2C->STAT & 0x01)){ }
		//LPC_I2C->MSTCTL |= 1 << 2; //Stop

		LPC_GPIO_PORT->CLR[0] = (1 << 4);

//		for(i = 0; i < 100000; i++){ }
//		for(i = 0; i < 100000; i++){ }
	}


	return 0;
}
*/
#endif

/*
int main(void) {
	volatile unsigned long i;

	LPC_SYSCTL->SYSAHBCLKCTRL |= SYSCTL_CLOCK_SWM;
	LPC_SYSCTL->SYSAHBCLKCTRL |= SYSCTL_CLOCK_GPIO;
	LPC_GPIO_PORT->DIR[0] |= 1UL << 4;
	//LPC_GPIO_PORT->DIR[0] |= 1UL << 4;
	LPC_GPIO_PORT->CLR[0] = (1 << 4);

	while (1) {
//		LPC_GPIO_PORT->SET[0] = (1 << 4);
//		for(i = 0; i < 10000; i++){ }
//		LPC_GPIO_PORT->CLR[0] = (1 << 4);
//		for(i = 0; i < 10000; i++){ }
	}

	return 0;
}
*/
