#include "chip.h"

#ifdef MCU_TARGET_1
/*
const uint32_t OscRateIn = 0;
const uint32_t ExtRateIn = 0;

static I2C_HANDLE_T *i2cHandleSlave;
static uint32_t i2cSlaveHandleMEM[0x20];
#define I2C_ADDR_7BIT       (0xc0)
#define I2C_BUFF_SZ         16
static uint8_t rxBuff[I2C_BUFF_SZ];
static uint8_t txBuff[I2C_BUFF_SZ];
static I2C_PARAM_T param;
static I2C_RESULT_T result;

static void I2C_ParamCfg(void);
static void I2C_ResultClr(void);
static void I2C_SetupXfer(void);

static void Init_I2C_PinMux(void)
{
	Chip_Clock_EnablePeriphClock(SYSCTL_CLOCK_SWM);
	Chip_SWM_MovablePinAssign(SWM_I2C_SDA_IO, 1);
	Chip_SWM_MovablePinAssign(SWM_I2C_SCL_IO, 0);
	Chip_IOCON_PinSetI2CMode(LPC_IOCON, IOCON_PIO0, PIN_I2CMODE_FASTPLUS);
	Chip_IOCON_PinSetI2CMode(LPC_IOCON, IOCON_PIO1, PIN_I2CMODE_FASTPLUS);
	Chip_Clock_DisablePeriphClock(SYSCTL_CLOCK_SWM);
}


static void I2C_SetupSlaveMode(void)
{
	Chip_I2C_Init(LPC_I2C);

	i2cHandleSlave = LPC_I2CD_API->i2c_setup(LPC_I2C_BASE, i2cSlaveHandleMEM);

	LPC_I2CD_API->i2c_set_slave_addr(i2cHandleSlave, I2C_ADDR_7BIT, 0);

	I2C_ParamCfg();

	I2C_ResultClr();
}

static void I2C_XferComplete(uint32_t err_code, uint32_t n)
{
	I2C_SetupXfer();
}

static void I2C_ParamCfg(void)
{
	param.func_pt = I2C_XferComplete;
	param.num_bytes_send = I2C_BUFF_SZ;
	param.buffer_ptr_send = txBuff;
	param.num_bytes_rec = I2C_BUFF_SZ;
	param.buffer_ptr_rec = rxBuff;
}

static void I2C_ResultClr(void)
{
	result.n_bytes_sent = result.n_bytes_recd = 0;
}

static void I2C_SetupXfer(void)
{
	uint8_t data;

	uint8_t *buff_ptr = NULL;
	uint32_t i;

	if (result.n_bytes_recd > 0) {
		for (buff_ptr = rxBuff, i = 0; i < result.n_bytes_recd; i++) {

		}
	}

	if (result.n_bytes_sent > 0) {
		for (buff_ptr = txBuff, i = 0; i < result.n_bytes_sent; i++) {

		}
	}

	if (result.n_bytes_recd >= 2) {
		txBuff[0] = data = rxBuff[result.n_bytes_recd - 1];
	}

	I2C_ResultClr();

	LPC_I2CD_API->i2c_slave_transmit_intr(i2cHandleSlave, &param, &result);

	LPC_I2CD_API->i2c_slave_receive_intr(i2cHandleSlave, &param, &result);
}

void I2C_IRQHandler(void)
{
	LPC_I2CD_API->i2c_isr_handler(i2cHandleSlave);
}

int main(void)
{
	uint32_t fw = 0;

	SystemCoreClockUpdate();
	LPC_SYSCTL->SYSAHBCLKCTRL |= 1 << SYSCTL_CLOCK_SWM;
	LPC_SYSCTL->SYSAHBCLKCTRL |= 1 << SYSCTL_CLOCK_GPIO;
	LPC_SYSCTL->SYSAHBCLKCTRL |= 1 << SYSCTL_CLOCK_IOCON;
	LPC_SYSCTL->SYSAHBCLKCTRL |= 1 << SYSCTL_CLOCK_I2C0;

	fw = LPC_I2CD_API->i2c_get_firmware_version();

	Init_I2C_PinMux();

	I2C_SetupSlaveMode();

	NVIC_EnableIRQ(I2C_IRQn);

	I2C_SetupXfer();

	while (1) {
		__WFI();
	}
}
*/


const uint32_t OscRateIn = 0;
const uint32_t ExtRateIn = 0;

#define I2C_ADDR_7BIT           (0x60)
#define TICKRATE_HZ             (1000)
#define MONRDYEN				(1 << 16)
#define SLVPENDING				(1 << 8)
#define SLVSTATE				(3 << 9)
#define SLVCONTINUE				(1 << 0)
#define SLVIDX					(3 << 12)

#define SLVSTATE_ADDR				0x00
#define SLVSTATE_RECEIVE			0x01
#define SLVSTATE_TRANSMIT			0x02
#define SLVSTATE_RESERVED			0x03

#define SLVIDX_0					0x00
#define SLVIDX_1					0x01
#define SLVIDX_2					0x02
#define SLVIDX_3					0x03

static volatile uint32_t ticks;

void SysTick_Handler(void){
	ticks++;
}

void delay_ms(uint16_t delay_value){
	uint32_t ticks_timeout = ticks;
	ticks_timeout += delay_value;
	while(ticks < ticks_timeout){
		__WFI();
	}
}

void I2C_IRQHandler(void){
	volatile uint32_t irq_status;
	volatile uint32_t slave_state;
	volatile uint32_t slave_address_ack;
	volatile uint8_t i = 0;

	irq_status = LPC_I2C->INTSTAT;
	LPC_I2C->INTSTAT = 0x00;

	//if(irq_status & SLVPENDING){
		slave_address_ack = (irq_status & SLVIDX) >> 12;
		slave_state = (irq_status & SLVSTATE) >> 9;
		switch(slave_state){
		case SLVSTATE_ADDR:
			LPC_I2C->SLVCTL |= SLVCONTINUE;
			break;
		case SLVSTATE_RECEIVE:
			break;
		case SLVSTATE_TRANSMIT:
			break;
		case SLVSTATE_RESERVED:
			break;
		}

		switch(slave_address_ack){
		case SLVIDX_0:
			break;
		case SLVIDX_1:
			break;
		case SLVIDX_2:
			break;
		case SLVIDX_3:
			i++;
			break;
		}

	//}
}

int main(void){
	uint32_t ret = 0;
	uint8_t txData[16];
	uint8_t rxData[16];
	I2CM_XFER_T i2cmXferRec;

	i2cmXferRec.slaveAddr = I2C_ADDR_7BIT;
	i2cmXferRec.status = 0;
	i2cmXferRec.txSz = 1;
	i2cmXferRec.rxSz = 1;
	i2cmXferRec.txBuff = txData;
	i2cmXferRec.rxBuff = rxData;

	SystemCoreClockUpdate();

	LPC_SYSCTL->SYSAHBCLKCTRL |= 1 << SYSCTL_CLOCK_SWM;
	LPC_SYSCTL->SYSAHBCLKCTRL |= 1 << SYSCTL_CLOCK_GPIO;
	LPC_SYSCTL->SYSAHBCLKCTRL |= 1 << SYSCTL_CLOCK_IOCON;
	LPC_SYSCTL->SYSAHBCLKCTRL |= 1 << SYSCTL_CLOCK_I2C0;

	LPC_SWM->PINASSIGN[7] &= 0x00FFFFFF;
	LPC_SWM->PINASSIGN[8] &= 0xFFFFFF00;
	LPC_SWM->PINASSIGN[7] |= 0x01 << 24; //P0.1 = I2C_SDA
	LPC_SWM->PINASSIGN[8] |= 0x00; //P0.0 = I2C_SCL
	LPC_IOCON->PIO0[0] |= PIN_OD_MASK;
	LPC_IOCON->PIO0[1] |= PIN_OD_MASK;

	LPC_SYSCON->PRESETCTRL &= ~(1 << 6);
	LPC_SYSCON->PRESETCTRL |= 1 << 6;

	LPC_I2C->CLKDIV = 20; //114 kHz
	LPC_I2C->MSTTIME = 0x01; //3 clocks SCL(high), 2 clocks SCL(low), do not use logic operators here
	LPC_I2C->CFG |= 0x02; //Enable master & slave
	LPC_I2C->CFG |= 0x04; //Enable monitor

	LPC_I2C->SLVADR[3] = (I2C_ADDR_7BIT << 1) | 0x01; //Set address and enable it

	LPC_I2C->INTENSET |= MONRDYEN; //Monitor data ready

	NVIC_EnableIRQ(I2C_IRQn);
	SysTick_Config(SystemCoreClock / TICKRATE_HZ);

	while(1) {
		delay_ms(1);
	}
}


#endif
